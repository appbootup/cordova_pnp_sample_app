{
  "_args": [
    [
      {
        "raw": "cordova-plugin-camera-roll-location",
        "scope": null,
        "escapedName": "cordova-plugin-camera-roll-location",
        "name": "cordova-plugin-camera-roll-location",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/Users/rajvinder.singh/Documents/Cordova/PnPSample"
    ]
  ],
  "_from": "cordova-plugin-camera-roll-location@latest",
  "_id": "cordova-plugin-camera-roll-location@0.3.3",
  "_inCache": true,
  "_location": "/cordova-plugin-camera-roll-location",
  "_nodeVersion": "5.12.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/cordova-plugin-camera-roll-location-0.3.3.tgz_1482167457268_0.9012090633623302"
  },
  "_npmUser": {
    "name": "mixersoft",
    "email": "michael@snaphappi.com"
  },
  "_npmVersion": "3.8.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "cordova-plugin-camera-roll-location",
    "scope": null,
    "escapedName": "cordova-plugin-camera-roll-location",
    "name": "cordova-plugin-camera-roll-location",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/cordova-plugin-camera-roll-location/-/cordova-plugin-camera-roll-location-0.3.3.tgz",
  "_shasum": "70908a2bd590549ebeafc416bddd1ad3f8aa5b22",
  "_shrinkwrap": null,
  "_spec": "cordova-plugin-camera-roll-location",
  "_where": "/Users/rajvinder.singh/Documents/Cordova/PnPSample",
  "author": {
    "name": "Michael Lin"
  },
  "bugs": {
    "url": "https://github.com/mixersoft/cordova-plugin-camera-roll-location/issues"
  },
  "cordova": {
    "id": "com-snaphappi-plugin-camera-roll-location",
    "platforms": [
      "ios"
    ]
  },
  "dependencies": {},
  "description": "get location metadata with photos from CameraRoll",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "70908a2bd590549ebeafc416bddd1ad3f8aa5b22",
    "tarball": "https://registry.npmjs.org/cordova-plugin-camera-roll-location/-/cordova-plugin-camera-roll-location-0.3.3.tgz"
  },
  "engines": {
    "cordovaDependencies": {
      "0.1.0": {
        "cordova": "6.3.1",
        "cordova-plugin-add-swift-support": ">1.3.2"
      }
    }
  },
  "gitHead": "7c422602bf6ebc5efada35786648f2c442985f3d",
  "homepage": "https://github.com/mixersoft/cordova-plugin-camera-roll-location#readme",
  "keywords": [
    "ecosystem:cordova",
    "cordova-ios",
    "camera",
    "location",
    "gps"
  ],
  "license": "Apache License 2.0",
  "maintainers": [
    {
      "name": "mixersoft",
      "email": "michael@snaphappi.com"
    }
  ],
  "name": "cordova-plugin-camera-roll-location",
  "optionalDependencies": {},
  "readme": "# Cordova `CameraRollLocation` plugin\nThis cordova plugin provides an API for accessing camera-roll photos with location and 'moment' information.\n\nplugin id=`\"com-snaphappi-plugin-camera-roll-location\"`\n\n## Supported Platforms\n\n* `ios` version 8+\n\n## Installation\n\n```\nionic plugin add cordova-plugin-add-swift-support --save\nionic plugin add cordova-plugin-camera-roll-location --save\nionic build ios\n```\n\n### Compatibility\n\n```\nCordova CLI: 6.3.1\nGulp version:  CLI version 3.9.1\nGulp local:  \nIonic CLI Version: 2.1.0\nIonic App Lib Version: 2.1.0-beta.1\nios-deploy version: 1.8.6\nios-sim version: 5.0.8\nOS: Mac OS X El Capitan\nNode Version: v5.12.0\nXcode version: Xcode 7.3 Build version 7D175\n```\n\n## Usage\n\n* see the demo: https://github.com/mixersoft/ionic2-camera-roll-location-demo\n\n```javascript\n// typescript \ninterface cameraRollPhoto {\n  uuid: string,\n  filename: string,\n  dateTaken: string, // isoDate\n  localTime: string | Date, // YYYY-MM-DD HH:MM:SS.SSS\n  mediaType: number,\n  mediaSubtype: number,\n  width: number,\n  height: number,\n  duration: number,\n  location?: GeoJsonPoint,      // deprecate\n  position?: LatLngSpeedLiteral,\n  momentId?: string,\n  momentLocationName?: string\n}\n\n// deprecate\ninterface location {\n  type: string,\n  coordinates: [number,number]  // [lon, lat]\n  speed?: number\n}\n\n// same as google.maps.LatLngLiteral | {speed}\n// prefer {position: LatLngSpeedLiteral} over {location:GeoJsonPoint}\ninterface LatLngSpeedLiteral {\n  lat: number,\n  lng: number,\n  speed: number\n}\n\ninterface optionsGetCameraRoll {\n  from?: Date,\n  to?: Date,\n  mediaType?: mediaType,\n  mediaSubtype?: mediaSubtype\n}\n\ninterface optionsGetImage {\n    width?: number;\n    height?: number;\n    version?: PHImageRequestOptionsVersion;\n    resizeMode?: PHImageRequestOptionsResizeMode;\n    deliveryMode?: PHImageRequestOptionsDeliveryMode;\n    rawDataURI?: boolean;\n}\n\n// deprecate: renamed to getCameraRoll\ntype optionsGetByMoments = optionsGetCameraRoll;\n\n\nclass CameraRollPhoto {\n\n  /**\n   * get photos from CameraRoll together with location and moment data\n   * calls (ios/swift) CameraRollLocation.getByMoments() using plugin exec()\n   * swift: func getByMoments(from from: NSDate? = nil, to: NSDate? = nil) -> [AnyObject]\n   *\n   * plugin = window.cordova.plugins.CameraRollLocation\n   *\n   * @param  {optionsGetCameraRoll}   options {from:, to:, mediaType:, mediaSubtypes: }\n   * @param  function NodeCallback    nodejs style callback, i.e. (err, resp)=>{}\n   * @return [cameraRollPhoto,]       array of cameraRollPhoto\n   */  \n  getCameraRoll(\n    options: optionsGetCameraRoll\n    , callback?: (err:any, resp:any)=>void\n  ) : void\n\n  /**\n   * get Image as DataURI from CameraRollWithLoc\n   * NOTEs:\n   *  runs synchronously on a background thread\n   *  DataURIs are compatible with WKWebView, more performant scrolling\n   * @param uuids: string[] of PHAsset.localIdentifiers\n   * @param options:\n   *  defaults:\n   *    width: 320\n   *    height: 240\n   *    version: PHImageRequestOptionsVersion.Current\n   *    resizeMode: PHImageRequestOptionsResizeMode.Fast\n   *    deliveryMode: PHImageRequestOptionsDeliveryMode.fastFormat\n   *    rawDataURI: false, add prefix `data:image/jpeg;base64,` to DataURI\n   * @return { uuid: DataURI }\n   */\n  getImage(\n    uuids: string[]\n    , options: optionsGetImage\n    , callback?:  (err:any, resp:any)=>void\n  ): Promise<{[key: string]: DataURI;}>\n\n  // deprecate\n  getByMoments(\n    options: optionsGetByMoments\n    , callback: (err:any, resp:any)=>void\n  ) : void\n}\n\n\n// javascript\nplatform.ready().then(() => {\n  // Okay, so the platform is ready and our plugins are available.\n\n  const plugin = cordova.plugins.CameraRollLocation;\n  const results = plugin.getCameraRoll(\n    {\n      from: new Date('2016-09-01'),\n      to: new Date('2016-09-30')\n    }\n    , (err, resp) => {\n      if (err) return console.error(err)\n      if (!resp || !resp.length) return console.info(\"plugin resp = empty\")\n      console.info(`plugin getCameraRoll() result[0...5]=${ resp.slice(0,5) }`);\n    }\n  );\n\n  // or getCameraRoll() with Promises\n  plugin.getCameraRoll({\n      from: new Date('2016-09-01'),\n      to: new Date('2016-09-30')\n  })\n  .then( result=>{\n    console.info(`plugin getCameraRoll() result[0...5]=${ result.slice(0,5) }`);\n  })\n\n  // getImage() with Promises\n  plugin.getImage([\"XXXXXXXX-XXXX-XXXX-XXXX-F25F0864AE01/L0/001\"],{\n    width: 640,\n    height: 480\n  })\n  .then( result=>{\n    IMG.src = result[\"XXXXXXXX-XXXX-XXXX-XXXX-F25F0864AE01/L0/001\"]\n  })\n});\n\n\n```\n\n### Sample Data\n\n```\n[{\n  \"uuid\": \"XXXXXXXX-XXXX-XXXX-XXXX-F25F0864AE01/L0/001\",\n  \"filename\": \"IMG_0001.JPG\",\n  \"dateTaken\": \"2016-01-01T09:51:28.446Z\",\n  \"localTime\": \"2016-01-01 12:51:28.446\",\n  \"mediaType\": 1,\n  \"mediaSubypes\": 0,\n  \"isFavorite\": false,\n  \"width\": 286,\n  \"height\": 183,\n  \"position\": {\n    \"lat\": 48.8583736,\n    \"lng\": 2.2922873,\n    \"speed\": 1.54\n  },\n  \"momentId\": \"XXXXXXXX-XXXX-XXXX-XXXX-1F2FD88BA004/L0/060\",\n  \"momentLocationName\": \"Paris\"\n}]\n```\n\n## Reset Project Plugins\n\n```\n# ionic start myProject --v2\n# cd myProject\n# ionic plugin remove cordova-plugin-add-swift-support\n# ionic plugin add cordova-plugin-add-swift-support --save\nionic plugin remove com-snaphappi-plugin-camera-roll-location;\nionic plugin add cordova-plugin-camera-roll-location;\nionic emulate\n```\n\n## License\n\nThis software is released under the [Apache 2.0 License][apache2_license].\n\nÂ© 2016 Snaphappi, Inc. All rights reserved\n\n[apache2_license]: http://opensource.org/licenses/Apache-2.0\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mixersoft/cordova-plugin-camera-roll-location.git"
  },
  "scripts": {},
  "version": "0.3.3"
}
